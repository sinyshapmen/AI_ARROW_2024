import telebot
from telebot import types
import openai 
from config import TOKEN, PATH, OPENAI_API_KEY_RU, OPENAI_API_KEY_EN, STICKERS_API
from categories import cat 
from pictures import Text2ImageAPI, temp_picture, save_picture, rus_to_eng, dalle_picture_save
from algorithms import random_distribution, dice, final_choise
import re

bot = telebot.TeleBot(TOKEN)

client = openai.Client(api_key=OPENAI_API_KEY_RU, base_url="https://api.proxyapi.ru/openai/v1")
# client = openai.Client(api_key=OPENAI_API_KEY_EN)

# –∫–ª—é—á–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ
world_info = {}
# –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è gpt
game_context = {}
# –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–≥—Ä—ã
characters = {}
info_for_creation = {}
# —Ä–∞—Å—ã –º–∏—Ä–∞
races_dict = {}
# —Å–ª–æ–≤–∞—Ä—å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
selected_race = {}
# id —á–∞—Ç–∞ –∏–≥—Ä—ã
global_chat_id = None
# —Ñ–ª–∞–≥ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
game_started = False

final_cat = False


# c—Ç–∞—Ä—Ç –≤ –ª–∏—á–∫–µ
@bot.message_handler(commands=['start'])
def private(message):
    if message.chat.type == "private": 
        if message.text.startswith("/start setup_"):
            markup = types.InlineKeyboardMarkup()
            choose_race = types.InlineKeyboardButton("–í—ã–±–æ—Ä —Ä–∞—Å—ã", callback_data="choose_race")
            markup.add(choose_race)
            bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ c–Ω–∏–∑—É ‚¨áÔ∏è", reply_markup=markup)
            if message.chat.id not in info_for_creation:
                info_for_creation[message.chat.id] = []

        else:
            markup = telebot.types.InlineKeyboardMarkup()
            adding = telebot.types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url="https://t.me/pocket_dnd_bot?startgroup=true")
            markup.add(adding)
        
            bot.send_message(
                message.chat.id, 
                'üêâ –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É',
                reply_markup=markup
            )


# –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã(–Ω–∞—á–∞–ª–æ)
@bot.message_handler(commands=['reset'])
def restart_game(message):
    global game_started
    if game_started:
        markup = types.InlineKeyboardMarkup()
        start_game = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", callback_data="end")
        markup.add(start_game)

        bot.send_message(message.chat.id, '*‚ÄºÔ∏è –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É? üò¢* \n\n_–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ–ª–Ω–æ–º—É —Å–±—Ä–æ—Å—É –≤—Å–µ—Ö –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö_', parse_mode="Markdown", reply_markup=markup)

    else:
        bot.send_message(message.chat.id, '*–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–∞*', parse_mode="Markdown")

# –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã(–∫–æ–Ω–µ—Ü)
@bot.callback_query_handler(func=lambda call: call.data == "end")
def clear_all(call):
    global world_info, game_context, characters, races_dict, selected_race, game_started, info_for_creation
    world_info = {}
    game_context = {}
    characters = {}
    info_for_creation = {}
    races_dict = {}
    selected_race = {}
    game_started = False

    markup = types.InlineKeyboardMarkup()
    reload = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ", callback_data="reload")
    markup.add(reload)
    
    bot.send_message(call.message.chat.id, '*–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞ ‚úÖ*', parse_mode="Markdown", reply_markup=markup)

# –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data == "reload")
def start_again(call):
    global global_chat_id
    global_chat_id = call.message.chat.id
    info('reload')

# –∑–∞–¥–∞–Ω–∏—è(—Å–ª—É–∂–µ–±–Ω–∞—è)
def info(task):
    if task == 'reload':
        global global_chat_id, game_started
        markup = types.InlineKeyboardMarkup()
        start_game = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É ‚úÖ", callback_data="start_game")
        rules = types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ üìã", callback_data="print_rules")
        markup.add(start_game, rules, row_width=2)

        with open('pictures/start_game.jpg', 'rb') as image_file:
            bot.send_photo(
                global_chat_id, 
                photo=image_file, 
                caption="*–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –æ—Ç–≤–∞–∂–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏! üåç‚ú®* \n\n *–Ø - –≤–∞—à –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ Dungeons & Dragons! üé≤*\n\n _–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –≤–∑—è—Ç—å –Ω–∞ —Å–µ–±—è –≤—Å–µ —Å–ª–æ–∂–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –∏–≥—Ä—ã, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∏ –≤–µ—Å–µ–ª—å–µ–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–±–æ—Ç. \n\n –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –≤ –º–∏—Ä—ã, –ø–æ–ª–Ω—ã–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –ø–æ–≤–æ—Ä–æ—Ç–æ–≤! –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é!_ üååüéâ", reply_markup=markup, parse_mode='Markdown', 
            )
        game_started = True

        return

# c—Ç–∞—Ä—Ç –≤ —á–∞—Ç–µ
@bot.my_chat_member_handler()
def first_chat(update):
    if update.chat.type != "private":  
        print('start')
        global global_chat_id, game_started
        if update.new_chat_member.status == "member":
            bot.send_message(update.chat.id, "*–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞* üëæ", parse_mode='Markdown')
        elif update.new_chat_member.status == "administrator":
            global_chat_id = update.chat.id

            markup = types.InlineKeyboardMarkup()
            start_game = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É ‚úÖ", callback_data="start_game")
            rules = types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ üìã", callback_data="print_rules")
            markup.add(start_game, rules, row_width=2)

            with open('pictures/start_game.jpg', 'rb') as image_file:
                bot.send_photo(
                    update.chat.id, 
                    photo=image_file, 
                    caption="*–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –æ—Ç–≤–∞–∂–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏! üåç‚ú®* \n\n *–Ø - –≤–∞—à –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ Dungeons & Dragons! üé≤*\n\n _–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –≤–∑—è—Ç—å –Ω–∞ —Å–µ–±—è –≤—Å–µ —Å–ª–æ–∂–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –∏–≥—Ä—ã, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∏ –≤–µ—Å–µ–ª—å–µ–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–±–æ—Ç. \n\n –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –≤ –º–∏—Ä—ã, –ø–æ–ª–Ω—ã–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –ø–æ–≤–æ—Ä–æ—Ç–æ–≤! –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é!_ üååüéâ", reply_markup=markup, parse_mode='Markdown', 
                )
            game_started = True


@bot.callback_query_handler(func=lambda call: call.data == "print_rules")
def show_rules(call):
    markup = types.InlineKeyboardMarkup()
    back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="reload")
    markup.add(back)

    bot.send_message(global_chat_id, "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º! ‚öîÔ∏èüé≤\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –±–æ—Ç–∞, –≥–¥–µ –≤–∞—Å –∂–¥—É—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è!\n\n–í–æ—Ç –∫–∞–∫ –∏–≥—Ä–∞—Ç—å:\n\n1. *–°–æ–∑–¥–∞–Ω–∏–µ –º–∏—Ä–∞* üó∫:\n\n‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∏—Ä–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ—é —Ñ–∞–Ω—Ç–∞–∑–∏—é! üí´\n‚Ä¢ –û—Ç –ø—Ä–æ—Å—Ç–æ–π –∂–∏–∑–Ω–∏ –Ω–∞ –ó–µ–º–ª–µ –¥–æ –≤–æ–ª—à–µ–±–Ω—ã—Ö –º–∏—Ä–æ–≤, –æ—Ç –º–∏—Ä–∞ –º–∏–ª—ã—Ö —Ñ–µ–π –¥–æ –æ—Å—Ç—Ä–æ–≤–∞ –≤–µ—á–Ω–æ–π –º–µ—Ä–∑–ª–æ—Ç—ã - –≤—ã–±–∏—Ä–∞–π—Ç–µ, —á—Ç–æ –≤–∞–º –ø–æ –¥—É—à–µ! üòâ\n\n2. *–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π* ü¶∏‚Äç‚ôÄÔ∏èü¶∏‚Äç‚ôÇÔ∏è:\n\n‚Ä¢ –ò–≥—Ä–∞–π—Ç–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç 2 –¥–æ 6 —á–µ–ª–æ–≤–µ–∫! üë´üë¨üë≠\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ üé≤\n‚Ä¢ –ù–∞ –≤—ã–±–æ—Ä –≤–∞–º –¥–∞–µ—Ç—Å—è 6 —Ä–∞—Å, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∏—Ä–∞, —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–Ω–µ—à–Ω–æ—Å—Ç—å—é –∏ –Ω–∞–±–æ—Ä–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫. üßù‚Äç‚ôÄÔ∏èüßõ‚Äç‚ôÇÔ∏è\n\n*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n\n‚Ä¢ –í –∏–≥—Ä–µ 6 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∏—Ä–∞. üß†üí™\n‚Ä¢ –ß–µ–º –≤—ã—à–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ —É—Å–ø–µ—Ö! üöÄ\n\n3. *–ò–≥—Ä–∞* üé≤:\n\n‚Ä¢ –ú–∏—Ä —Å–æ–∑–¥–∞–Ω, –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≥–æ—Ç–æ–≤—ã - –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å–æ–±—ã—Ç–∏—è! üî•\n‚Ä¢ –¶–µ–ª—å –∏–≥—Ä—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ–º. üéØ\n‚Ä¢ –£ –≤–∞—Å –µ—Å—Ç—å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è. \n‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –∫–∞–∫–æ–π –Ω–∞–≤—ã–∫ –≤–∞–º –Ω—É–∂–µ–Ω. üí°\n‚Ä¢ –£ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –µ—Å—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Ç 8 (–æ—á–µ–Ω—å –ª–µ–≥–∫–æ) –¥–æ 15 (—Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ). ‚ò†Ô∏è\n‚Ä¢ –ü–æ–¥–±—Ä–æ—Å—å—Ç–µ 2 –∫—É–±–∏–∫–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫ –∏—Ö —Å—É–º–º–µ –Ω—É–∂–Ω—ã–π –Ω–∞–≤—ã–∫. üé≤\n‚Ä¢ –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ–ª—å—à–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ - –≤—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å! ü•≥\n‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –Ω–µ –±–µ–¥–∞, –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è! üòâ\n‚Ä¢ –û–±—Å—É–∂–¥–∞–π—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏, –∫—Ç–æ –∏ –∫–∞–∫ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å! üó£\n\n4. *–ö–æ–Ω—Ü–æ–≤–∫–∞* üèÜ:\n\n‚Ä¢ –í –∏–≥—Ä–µ 5 —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ü–æ–≤–æ–∫ (–Ω–µ —Å—á–∏—Ç–∞—è —Å–º–µ—Ä—Ç—å). \n‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –∏—Ö –¥–ª—è —Å–µ–±—è! \n\n–ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º? –¢–æ–≥–¥–∞ –≤ –ø—É—Ç—å! üèÉ‚Äç‚ôÄÔ∏èüèÉ‚Äç‚ôÇÔ∏è", parse_mode='Markdown', reply_markup=markup)

    

# –≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data == "start_game")
def handle_start_game(call):
    global game_started
    markup_w = types.InlineKeyboardMarkup()
    choose_wrld = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="choose_cat")
    own_wrld = types.InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="own_cat")
    global global_chat_id
    global_chat_id = call.message.chat.id

    markup_w.add(choose_wrld, own_wrld, row_width=2)

    bot.send_message(call.message.chat.id, "*–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–∏—Ä üåè:* \n\n1) –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—Ç–∏–Ω–≥ –∏–∑ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π üëÅ \n\n2) –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å–µ—Ç—Ç–∏–Ω–≥ ‚úçÔ∏è\n\n‚ùóÔ∏è_–î–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–≥—Ä—ã —è–≤–ª—è–µ—Ç—Å—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ :)_", reply_markup=markup_w, parse_mode='Markdown')
    game_started = True


# –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏(–∑–∞–ø—É—Å–∫)
@bot.callback_query_handler(func=lambda call: call.data == "choose_cat")
def categories(call):
    page_number = 0
    send_category_page(call.message, page_number)


cat_list = list(cat.keys())

# –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def send_category_page(message, page_number):
    category_key = cat_list[page_number]
    category_data = cat[category_key]
    text = category_data[0]
    image_path = f"{PATH}{category_data[1]}"  

    with open(image_path, 'rb') as image_file:
        bot.send_photo(
            message.chat.id, 
            image_file, 
            caption=text, 
            reply_markup=create_pagination_keyboard_cat(page_number),
            parse_mode='Markdown'
        )

# –≤–≤–æ–¥ —Å–≤–æ–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda call: call.data == "own_cat")
def own_category(call):
    input_wrld = bot.send_message(call.message.chat.id, "üåè –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∏—Ä–∞:")
    bot.register_next_step_handler(input_wrld, process_own_category)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def process_own_category(message):
    user_category = message.text
    if len(user_category) <= 40:
        generate_world(message.chat.id, user_category)
    else:
        markup_w = types.InlineKeyboardMarkup()
        own_wrld = types.InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="own_cat")

        markup_w.add(own_wrld)
        bot.send_message(message.chat.id, "*–î–ª–∏–Ω–∞ —Å–µ—Ç—Ç–∏–Ω–≥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 30 —Å–∏–º–≤–æ–ª–æ–≤.* \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–µ—Ç—Ç–∏–Ω–≥ –ø–æ–≤—Ç–æ—Ä–Ω–æ:", reply_markup=markup_w)


# –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏—Ä–∞ 
def generate_world(chat_id, setting):
    world_info[global_chat_id] = [setting]
    create = bot.send_sticker(global_chat_id, STICKERS_API[0])
    gen = f"–¢—ã –≤–µ–¥—É—â–∏–π –¥–ª—è –º–æ–µ–π –Ω–æ–≤–æ–π –∏–≥—Ä—ã, —Å–æ–∑–¥–∞–π –º–∏—Ä –¥–ª—è –∏–≥—Ä—ã —Å —Å–µ—Ç—Ç–∏–Ω–≥–æ–º - {setting}, —Å–æ–±–ª—é–¥–∞–π —Å—Ç—Ä–æ–≥–∏–π —à–∞–±–ª–æ–Ω. –ù–∞–∑–≤–∞–Ω–∏–µ –º–∏—Ä–∞; –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∏—Ä–∞; 4 –∫—Ä–∞—Ç–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –¥–ª—è DND –¥–ª—è —ç—Ç–æ–≥–æ –º–∏—Ä–∞. –î–æ–±–∞–≤—å –Ω–µ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ –≤ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ñ–æ—Ä–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ Markdown."
    markup = telebot.types.InlineKeyboardMarkup()
    choose_adv = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", callback_data="choose_adv")
    sorry = types.InlineKeyboardButton("–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="sorry")
    markup.add(choose_adv, sorry, row_width=2)

    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": gen}],
        max_tokens=1200
    )

    output = response.choices[0].message.content.replace("#", "")
    game_context[chat_id] = [{"role": "user", "content": gen}, {"role": "assistant", "content": output}]

    bot.delete_message(global_chat_id, create.message_id)
    generat = bot.send_sticker(global_chat_id, STICKERS_API[1])

    prompt_small = '–í—ã–≤–µ–¥–∏ –µ–¥–∏–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∏—Ä–∞ –∏–∑ –ø—Ä–æ—à–ª–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏(–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤)'

    game_context[chat_id].append({"role": "user", "content": prompt_small})

    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=game_context[chat_id],
        max_tokens=500
    )

    small_disc = response.choices[0].message.content
    game_context[chat_id].append({"role": "assistant", "content": small_disc})

    temp_picture(small_disc)

    with open(PATH + 'game_assets/temp.png', 'rb') as image_file:
        bot.send_photo(chat_id, image_file)

    bot.send_message(chat_id, output, parse_mode='Markdown', reply_markup=markup)
    bot.delete_message(global_chat_id, generat.message_id)
    

# –≤—ã–±–æ—Ä –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ —Ä–∞—Å
@bot.callback_query_handler(func=lambda call: call.data.startswith(("choose_adv", "adv_")))
def adventure_choose(call):
    if call.data == "choose_adv":
        markup = types.InlineKeyboardMarkup(row_width=4)
        for k in range(1, 5):
            markup.add(types.InlineKeyboardButton(f"{k}", callback_data=f"adv_{k}"))
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    else:
        adv_number = call.data.split("_")[1]
        prompt = f"–í—ã–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è {adv_number} (–±–µ–∑ markdown)"
        game_context[call.message.chat.id].append({"role": "user", "content": prompt})
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=game_context[call.message.chat.id],
            max_tokens=30
        )

        adventure = response.choices[0].message.content
        game_context[call.message.chat.id].append({"role": "assistant", "content": adventure})
        bot.answer_callback_query(call.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ: {adventure}")
        race = bot.send_sticker(global_chat_id, STICKERS_API[3])  
        world_info[global_chat_id].append(adventure)

        prompt_race = '–¢–µ–ø–µ—Ä—å –≤—ã–≤–µ–¥–∏ 6 —Ä–∞—Å –¥–ª—è –∂–∏—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ –º–∏—Ä–∞, –∏—Ö –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏(6 —à—Ç—É–∫), —á—å–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –æ—Ç 0 –¥–æ 6. –°—É–º–º–∞ –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤ –°–¢–†–û–ì–û –ù–ï –ë–û–õ–¨–®–ï 6(–Ω–∞–ø—Ä–∏–º–µ—Ä 1 + 0 + 3 + 1 + 1 + 0). –ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π Markdown'

        game_context[call.message.chat.id].append({"role": "user", "content": prompt_race})
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=game_context[call.message.chat.id],
            max_tokens=1200
        )


        races = response.choices[0].message.content.replace("#", "")
        game_context[call.message.chat.id].append({"role": "assistant", "content": races})

        bot_username = bot.get_me().username
        rl = f"https://t.me/{bot_username}?start=setup_"

        markup = types.InlineKeyboardMarkup()
        go_to_private = types.InlineKeyboardButton("üßùüèª‚Äç‚ôÄÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", url=rl)
        markup.add(go_to_private)

        global races_dict

        prompt_races_dict = '–í–µ—Ä–Ω–∏ –∏–∑ —ç—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è –≤—Å–µ —Ä–∞—Å—ã. –ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –∫–æ–¥(–±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω–∞(```py), —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞—Ä—å). –§–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞—Ä—è: –∫–ª—é—á - –Ω–∞–∑–≤–∞–Ω–∏–µ, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫, –≥–¥–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—ã, –∞ –≤—Ç–æ—Ä–æ–π - –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ - —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏(–∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞), –∞ –∑–Ω–∞—á–µ–Ω–∏—è - –∑–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–∞—Å—ã(—Ç–æ–∂–µ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞)'
        game_context[call.message.chat.id].append({"role": "user", "content": prompt_races_dict})
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=game_context[call.message.chat.id]
        )

        races_dict = eval(response.choices[0].message.content)
        game_context[call.message.chat.id].append({"role": "assistant", "content": str(races_dict)})

        bot.send_message(call.message.chat.id, races, parse_mode='Markdown', reply_markup=markup)
        bot.delete_message(call.message.chat.id, race.message_id)


# –Ω–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –≤—ã–±–æ—Ä —Ä–∞—Å—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('choose_race'))
def choose_race(call):
    page_number = 0
    send_race_page(call.message, page_number)

# –∑–∞–ø—É—Å–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å
def send_race_page(message, page_number):
    race_name = list(races_dict.keys())[page_number]
    race_info = races_dict[race_name][0]  
    race_stats = races_dict[race_name][1]

    race_stats_formatted = "\n".join([f"*{stat}*: {value}" for stat, value in race_stats.items()])
    
    text=f"*{race_name}*\n\n{race_info}\n\n*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n\n{race_stats_formatted}"
    
    bot.send_message(
        message.chat.id,
        text,
        reply_markup=create_pagination_keyboard_race(page_number),
        parse_mode='Markdown'
    )

# –∏–Ω–ª–∞–π–Ω —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ
@bot.callback_query_handler(func=lambda call: call.data == "sorry")
def balance(call):
    bot.answer_callback_query(call.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø—Ä–æ–±–ª–µ–º —Å API –∫–ª—é—á–∞–º–∏, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ üò≠")

# —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Ç—Ç–∏–Ω–≥–∞
def create_pagination_keyboard_cat(page_number):
    keyboard = types.InlineKeyboardMarkup(row_width=3)

    left_button = types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"left_c:{page_number}")
    select_button = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data=f"select_c:{page_number}")
    right_button = types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"right_c:{page_number}")

    if page_number > 0:
        keyboard.add(left_button)
    
    keyboard.add(select_button)
    
    if page_number < len(cat_list) - 1:
        keyboard.add(right_button)
    
    return keyboard


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–µ—Ç—Ç–∏–Ω–≥–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith(('left_c', 'right_c', 'select_c', 'generate_world')))
def callback_query(call):
    global final

    action = call.data.split(':')[0] if ':' in call.data else call.data

    if action.startswith('left_c') or action.startswith('right_c') or action.startswith('select_c'):
        page_number = int(call.data.split(':')[1])

        if action == "left_c" and page_number > 0:
            page_number -= 1
        elif action == "right_c" and page_number < len(cat_list) - 1:
            page_number += 1
        elif action == "select_c":
            final = cat_list[page_number]
            markup = types.InlineKeyboardMarkup()
            comeback = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É", callback_data="choose_cat")
            generate = types.InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∏—Ä", callback_data="generate_world")

            markup.add(comeback, generate)

            global final_cat

            final_cat = bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {final}", reply_markup=markup)

            return

        image_path = f"{PATH}{cat[cat_list[page_number]][1]}"
        with open(image_path, 'rb') as image_file:
            bot.edit_message_media(
                media=types.InputMediaPhoto(
                    media=image_file,
                    caption=cat[cat_list[page_number]][0],
                    parse_mode='Markdown'
                ),
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=create_pagination_keyboard_cat(page_number)
            )       
    
    elif action == 'generate_world':
        bot.delete_message(global_chat_id, final_cat.message_id)
        generate_world(call.message.chat.id, final)

# —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å
def create_pagination_keyboard_race(page_number):
    keyboard = types.InlineKeyboardMarkup()
    
    left_button = types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"left_r:{page_number}")
    select_button = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data=f"select_r:{page_number}")
    right_button = types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"right_r:{page_number}")
    
    if page_number > 0:
        keyboard.add(left_button)
    
    keyboard.add(select_button)
    
    if page_number < len(races_dict) - 1:
        keyboard.add(right_button)
    
    return keyboard

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞—Å
@bot.callback_query_handler(func=lambda call: call.data.startswith(('left_r', 'right_r', 'select_r')))
def handle_race_selection(call):
    action = call.data.split(':')[0]
    page_number = int(call.data.split(':')[1])

    if action == "left_r" and page_number > 0:
        page_number -= 1
    elif action == "right_r" and page_number < len(races_dict) - 1:
        page_number += 1
    elif action == "select_r":
        global race_name
        race_name = list(races_dict.keys())[page_number]

        info_for_creation[call.message.chat.id].append(race_name)
        print(info_for_creation)

        # if global_chat_id not in characters:
        #     characters[global_chat_id] = {}

        # if call.message.chat.id not in characters[global_chat_id]:
        #     characters[global_chat_id][call.message.chat.id] = [race_name]


        selected_race[call.message.chat.id] = {
            'name': race_name,
            'info': races_dict[race_name][0],
            'stats': races_dict[race_name][1]
        }

        markup = types.InlineKeyboardMarkup()
        comeback = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É ‚¨ÖÔ∏è", callback_data="choose_race")
        next_step = types.InlineKeyboardButton("–î–∞–ª–µ–µ ‚úÖ", callback_data="skills")
        markup.add(comeback, next_step)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"*–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å—É: {race_name}üßùüèª‚Äç‚ôÄÔ∏è‚ú®*\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ _–Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!_",
            reply_markup=markup,
            parse_mode='Markdown'
        )
        return
    

    race_name = list(races_dict.keys())[page_number]
    race_info = races_dict[race_name][0]  
    race_stats = races_dict[race_name][1]

    race_stats_formatted = "\n".join([f"*{stat}*: {value}" for stat, value in race_stats.items()])
    
    text=f"*{race_name}*\n\n{race_info}\n\n*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n\n{race_stats_formatted}"
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        reply_markup=create_pagination_keyboard_race(page_number),
        parse_mode='Markdown'
    )

skills_final = None

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–∏–ª–ª–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith(("skills", "shuffle", "save")))
def define_skills(call):
    if call.data == "skills":
        markup = types.InlineKeyboardMarkup()
        shuffle = types.InlineKeyboardButton("–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏ üé≤", callback_data="shuffle")
        markup.add(shuffle)

        bot.send_message(call.message.chat.id, '*–£–∑–Ω–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞*', reply_markup=markup, parse_mode='Markdown')
    
    elif call.data == "shuffle":
        global skills_final
        race_data = selected_race.get(call.message.chat.id)
        if race_data:
            race_stats = race_data['stats']

        free = 16 - sum(race_stats.values())
        skills_final = random_distribution(free, race_stats)

        def format_skill_value(value):
            red = "üü•"
            yellow = "üü®"
            green = "üü©"
            empty = "‚¨õÔ∏è"

            if value in [0, 1, 2]:
                color = red
            elif value in [3, 4]:
                color = yellow
            elif value in [5, 6]:
                color = green

            return color * value + empty * (6 - value)

        formatted_skills = "\n".join([f"*{key.capitalize()}:* {format_skill_value(value)}" for key, value in skills_final.items()])

        markup = types.InlineKeyboardMarkup()
        shuffle_button = types.InlineKeyboardButton("–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å üé≤", callback_data="shuffle")
        save_button = types.InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å ‚úÖ", callback_data="save")
        markup.add(shuffle_button, save_button)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f'*–£–∑–Ω–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞*\n\n{formatted_skills}',
            reply_markup=markup,
            parse_mode='Markdown'
        )
    
    elif call.data == 'save':
        info_for_creation[call.message.chat.id].insert(1, skills_final)
        race = selected_race[call.message.chat.id]['name']

        race_stick = bot.send_sticker(call.message.chat.id, STICKERS_API[2])        
        prompt_player = f'–°–æ–∑–¥–∞–π —Ç–µ–ø–µ—Ä—å –∏–≥—Ä–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ç—Ç–∏–Ω–≥–∞. –†–∞—Å–∞ - {race}. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ - {skills_final}. –î–∞–π –º–Ω–µ –µ–≥–æ –∏–º—è –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫(–∫–∞–∫ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤, —Ç–∞–∫ –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤), —Å–≤—è–∑—å —Å –º–∏—Ä–æ–º. –ù–µ –±–æ–ª—å—à–µ 4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –í—Å–µ, –∫—Ä–æ–º–µ –∏–º–µ–Ω–∏, –≤ –æ–¥–∏–Ω –ø–∞—Ä–∞–≥—Ä–∞—Ñ'

        game_context[global_chat_id].append({"role": "user", "content": prompt_player})
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=game_context[global_chat_id],
            max_tokens=800
        )

        character = response.choices[0].message.content.replace("#", "")
        game_context[global_chat_id].append({"role": "assistant", "content": character})
        

        prompt_pers = '–°–æ–∑–¥–∞–π —Ç–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–Ω(–±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω–∞(```py), —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫), –≥–¥–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∞ –≤—Ç–æ—Ä–æ–π - —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ–≥–æ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏(–±–µ–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ —Å–≤—è–∑–∏ —Å –º–∏—Ä–æ–º). –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –∫–æ–¥'
        game_context[global_chat_id].append({"role": "user", "content": prompt_pers})
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=game_context[global_chat_id],
            max_tokens=300
        )
        global character_list
        character_list = eval(response.choices[0].message.content)
        game_context[global_chat_id].append({"role": "assistant", "content": str(character_list)})
        info_for_creation[call.message.chat.id].insert(0, character_list[0])
        info_for_creation[call.message.chat.id].insert(2, character_list[1])

        markup_p = types.InlineKeyboardMarkup()
        balance_button_p = types.InlineKeyboardButton("–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å üé≤", callback_data="sorry")
        save_pers_button_p = types.InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ‚úÖ", callback_data="pers")
        markup_p.add(balance_button_p, save_pers_button_p)

        global char_path
        char_path = save_picture(character_list[0], character_list[1])

        # characters[global_chat_id][call.message.chat.id].insert(0, character_list[0])
        # characters[global_chat_id][call.message.chat.id].insert(2, character_list[1])
        info_for_creation[call.message.chat.id].append(char_path)
        print(info_for_creation)

        with open(char_path, 'rb') as image_file:
            bot.send_photo(call.message.chat.id, image_file, caption=character, reply_markup=markup_p, parse_mode='Markdown')

        bot.delete_message(call.message.chat.id, race_stick.message_id)


# –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–º –≤ —á–∞—Ç
@bot.callback_query_handler(func=lambda call: call.data == "pers")
def pers_save(call):
    global global_chat_id
    character_data = info_for_creation[call.message.chat.id]
    username = call.from_user.username if call.from_user.username else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.chat.id}"
    character_name = character_data[0]
    race = character_data[1]
    skills = character_data[3]

    if global_chat_id not in characters:
            characters[global_chat_id] = {}



    existing_characters_count = len(characters[global_chat_id])


    if existing_characters_count >= 6:
        bot.send_message(call.message.chat.id, "*–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∏–≥—Ä—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ!* üò¢")
        return

    bot.send_message(call.message.chat.id, "*–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!* üéâ")

    if call.message.chat.id not in characters[global_chat_id]:
        characters[global_chat_id][call.message.chat.id] = [character_name, race, character_data[2], skills, character_data[-1]]
    
    print(characters)

    formatted_skills = "\n".join([f"*{key.capitalize()}*: {value}" for key, value in skills.items()])
    main_chat_message = (
        f"*{username}* —Å–æ–∑–¥–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:\n\n"
        f"*–ò–º—è*: {character_name}\n\n"
        f"*–†–∞—Å–∞*: {race}\n\n"
        f"*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n\n{formatted_skills}\n\n"
    )

    existing_characters_count = len(characters[global_chat_id])
    characters_created_message = f"–ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ - {', '.join([f'@{bot.get_chat_member(global_chat_id, user_id).user.username or user_id}' for user_id in characters[global_chat_id].keys()])} ({existing_characters_count})"

    main_chat_message += characters_created_message

    file_path = characters[global_chat_id][call.message.chat.id][-1]


    if existing_characters_count >= 2:
        markup = types.InlineKeyboardMarkup()
        start_game_button = types.InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É üéÆ", callback_data="game_started")
        markup.add(start_game_button)
        with open(file_path, 'rb') as image_file:
            bot.send_photo(
                global_chat_id, 
                photo=image_file, 
                caption=main_chat_message, 
                reply_markup=markup, 
                parse_mode='Markdown', 
            )
    elif existing_characters_count >= 6:
        markup = types.InlineKeyboardMarkup()
        start_game_button = types.InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É üéÆ", callback_data="game_started")
        markup.add(start_game_button)
        bot.send_message(global_chat_id, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ *–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π*. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
        with open(file_path, 'rb') as image_file:
            bot.send_photo(
                global_chat_id, 
                photo=image_file, 
                caption=main_chat_message, 
                reply_markup=markup, 
                parse_mode='Markdown', 
            )
    else:
        with open(file_path, 'rb') as image_file:
            bot.send_photo(
                global_chat_id, 
                photo=image_file, 
                caption=main_chat_message, 
                parse_mode='Markdown', 
            )

# –Ω–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ —Å–∞–º–æ–π –∏–≥—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data == "game_started")
def main_game(call):
    global event_count
    event_count = 5

    markup = types.InlineKeyboardMarkup()
    up_button = types.InlineKeyboardButton("‚¨ÜÔ∏è", callback_data="increase_event_count")
    select_button = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data="select_event_count")
    down_button = types.InlineKeyboardButton("‚¨áÔ∏è", callback_data="decrease_event_count")

    markup.add(up_button)
    markup.add(select_button)
    markup.add(down_button)
    bot.send_message(call.message.chat.id, f'–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π: {event_count}', reply_markup=markup)

# –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±—ã—Ç–∏–π
@bot.callback_query_handler(func=lambda call: call.data in ["increase_event_count", "decrease_event_count", "select_event_count"])
def adjust_event_count(call):
    global event_count

    if call.data == "increase_event_count":
        if event_count < 15:
            event_count += 1
        else:
            bot.answer_callback_query(call.id, "‚úñÔ∏è–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π ‚Äî 15", show_alert=True)

    elif call.data == "decrease_event_count":
        if event_count > 5:
            event_count -= 1
        else:
            bot.answer_callback_query(call.id, "‚úñÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π ‚Äî 5", show_alert=True)

    elif call.data == "select_event_count":
        final_events = event_count
        world_info[global_chat_id].append(final_events)
        markup = types.InlineKeyboardMarkup()
        start_cycle = types.InlineKeyboardButton("‚¨ÜÔ∏è", callback_data="start_game_cycle")
        markup.add(start_cycle)
        bot.send_message(call.message.chat.id, f'*–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!‚ú®üéÆ*\n\n_–°–µ—Ç—Ç–∏–Ω–≥ –º–∏—Ä–∞: {world_info[global_chat_id][0]}_\n_–í–∞—à–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ: {world_info[global_chat_id][1]}_', parse_mode='Markdown', reply_markup=markup)
        game_started = True
        return
    
    markup = types.InlineKeyboardMarkup()
    up_button = types.InlineKeyboardButton("‚¨ÜÔ∏è", callback_data="increase_event_count")
    select_button = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data="select_event_count")
    down_button = types.InlineKeyboardButton("‚¨áÔ∏è", callback_data="decrease_event_count")
    markup.add(up_button)
    markup.add(select_button)
    markup.add(down_button)

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π: {event_count}', reply_markup=markup)
    
formula_end_sum = 0

# –ù–∞—á–∞–ª–æ —Å–æ–±—ã—Ç–∏–π
@bot.callback_query_handler(func=lambda call: call.data == "start_game_cycle")
def main_game(call):
    count = world_info[global_chat_id][2]
    adventure = world_info[global_chat_id][1]

    intro_prompt = f'–ü—Ä–∞–≤–∏–ª–∞. –í—Å–µ–≥–æ –≤ –∏–≥—Ä–µ —Ä–æ–≤–Ω–æ {count} —Å–æ–±—ã—Ç–∏–π. –ö–∞–∂–¥–æ–µ –∏–∑ —Å–æ–±—ã—Ç–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ–º "{adventure}", –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ä–∞–Ω–µ–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –º–∏—Ä–∞ –∏ —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å —Ü–µ–ª—å. –î–∞–≤–∞–π –Ω–∞–º –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∏ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –Ω–µ–≥–æ c —Ä–∞–∑–º–µ—Ç–∫–æ–π Markdown, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–µ–π—Å—Ç–≤—É—é—Ç –∫–∞–∫—É—é-—Ç–æ –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –º–∏—Ä–∞ –∏ –≤—Å–µ —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏(–æ—Ç 8 –¥–æ 15, –≥–¥–µ 8 - —Å–∞–º–æ–µ –ª–µ–≥–∫–æ–µ, –∞ 15 - —Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–µ)(–≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∫—Ä–∞—Ç–∫–æ(1 –∏–ª–∏ 2 —Å–ª–æ–≤–∞) –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ). –°–Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è, –∞ –ø–æ–¥ –Ω–µ–π —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –£ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–æ–≥–∏—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏–≥—Ä—ã —Ç—ã –º–æ–∂–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É —Å –∂–∏—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –º–∏—Ä–∞. –Ø –≥–æ–≤–æ—Ä—é —Ç–µ–±–µ –∏—Å—Ö–æ–¥ —Å–æ–±—ã—Ç–∏—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —á—å–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏, –∞ —Ç–∞–∫–∂–µ, –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ–π –æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ª–∏ —Å–º–µ—Ä—Ç—å –∏–ª–∏ –Ω–µ—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ, –ø–æ —Ç–µ–º –∂–µ –ø—Ä–∞–≤–∏–ª–∞–º, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è(–ø–æ–ª—É—á–∏–ª–æ—Å—å/–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å; –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ/–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ) –∏ –¥–µ–ª–∞–π —Ç–∞–∫ –∫–∞–∂–¥—ã–π —Ä–∞–∑. –°–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã, —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Ü–µ –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ª–æ–≥–∏—á–µ—Å–∫—É—é —Ü–µ–ø–æ—á–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–≤–µ–ª–∞ –∫ —Ä–∞–∑–≤—è–∑–∫–µ - —Ü–µ–ª–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è. –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–û–õ–ñ–ù–û –±—ã—Ç—å —Ä–∞–∑–≤—è–∑–∫–æ–π. –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ —É–º–µ—Ä, –∏–≥—Ä–∞ –º–æ–∂–µ—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É, —è —Å–∫–∞–∂—É —Ç–µ–±–µ, –∫ –∫–∞–∫–æ–π –∫–æ–Ω—Ü–æ–≤–∫–µ –≤—Å–µ –ø—Ä–∏—à–ª–æ. –°–º–µ—Ä—Ç–µ–ª—å–Ω–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–æ–±—ã—Ç–∏—è—Ö —Å–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é 14 –∏ 15, –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ —Ç–∞–∫–∏–º —Å–æ–±—ã—Ç–∏—è–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –Ω–∞–ª–∏—á–∏–µ —Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ–π –æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –°–µ–π—á–∞—Å —Å—Ä–∞–∑—É –≤—ã–¥–∞–π –º–Ω–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è(–∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é. –ö –∫–∞–∂–¥–æ–º —Å–æ–±—ã—Ç–∏—é –¥–æ–±–∞–≤—å –Ω–µ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ –∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π markdown)'

    game_context[global_chat_id].append({"role": "user", "content": intro_prompt})

    response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=game_context[call.message.chat.id],
            max_tokens = 1000
        )
    
    first_adv = response.choices[0].message.content.replace("#", "")













    
    game_context[global_chat_id].append({"role": "assistant", "content": first_adv})

    choises_dict = '–í–µ—Ä–Ω–∏ –∏–∑ —ç—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π. –ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –∫–æ–¥(–±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω–∞(```py), —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞—Ä—å). –§–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞—Ä—è: –∫–ª—é—á - –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è(—Ü–∏—Ñ—Ä–æ–π), –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫, –≥–¥–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è, –∞ –≤—Ç–æ—Ä–æ–π - —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'

    game_context[global_chat_id].append({"role": "user", "content": choises_dict})

    response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=game_context[call.message.chat.id],
        )
    
    global event_dict

    event_dict = eval(response.choices[0].message.content)
    game_context[global_chat_id].append({"role": "assistant", "content": str(event_dict)})

    event_dict = {int(key): value for key, value in event_dict.items()}

    print(event_dict)

    markup = types.InlineKeyboardMarkup(row_width=2)
    for idx, (name, details) in enumerate(event_dict.items()):
        button = types.InlineKeyboardButton(name, callback_data=f"confirm_choice:{idx}")
        markup.add(button)

    bot.send_message(call.message.chat.id, first_adv, parse_mode="Markdown", reply_markup=markup)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_choice:"))
def confirm_choice(call):
    event_idx = int(call.data.split(':')[1])
    event_names = list(event_dict.keys())
    event_name = event_names[event_idx]
    difficulty, skill = event_dict[event_name]

    confirm_markup = types.InlineKeyboardMarkup()
    cancel_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="cancel_choice")
    select_button = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data=f"choice_selected:{event_idx}")
    confirm_markup.add(cancel_button, select_button, row_width=2)

    bot.send_message(call.message.chat.id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç '{event_name}'?\n\n*–°–ª–æ–∂–Ω–æ—Å—Ç—å:* {difficulty}\n*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞:* {skill}", reply_markup=confirm_markup, parse_mode="Markdown")

# –û—Ç–º–µ–Ω–∞
@bot.callback_query_handler(func=lambda call: call.data == "cancel_choice")
def cancel_choice(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)

# –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("choice_selected:"))
def select_choice(call):
    event_idx = int(call.data.split(':')[1])
    
    
    characters_in_game = characters[global_chat_id]
    
    character_markup = types.InlineKeyboardMarkup(row_width=2)
    for user_id, character_info in characters_in_game.items():
        character_name = character_info[0]
        character_button = types.InlineKeyboardButton(character_name, callback_data=f"perform_action:{event_idx}:{user_id}")
        character_markup.add(character_button)

    bot.send_message(call.message.chat.id, "*–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:*", reply_markup=character_markup)
    bot.delete_message(call.message.chat.id, call.message.message_id)

# –î–µ—Ç–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("perform_action:"))
def show_character_info(call):
    _, event_idx, user_id = call.data.split(':')
    event_idx = int(event_idx)
    user_id = int(user_id)

    character_info = characters[global_chat_id][user_id]
    character_name = character_info[0]
    race = character_info[1]
    skills = character_info[3]
    photo = character_info[-1]

    formatted_skills = "\n".join([f"*{key.capitalize()}*: {value}" for key, value in skills.items()])
    character_message = (
        f"*–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:* {character_name}\n\n"
        f"*–†–∞—Å–∞:* {race}\n\n"
        f"*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n\n{formatted_skills}"
    )

    character_markup = types.InlineKeyboardMarkup(row_width=2)
    back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"cancel_character_info:{event_idx}")
    select_button = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data=f"finalize_choice:{event_idx}:{user_id}")
    character_markup.add(back_button, select_button)

    with open(photo, 'rb') as image_file:
            bot.send_photo(
                call.message.chat.id, 
                photo=image_file, 
                caption=character_message, 
                parse_mode='Markdown',
                reply_markup=character_markup 
            )

# –æ—Ç–º–µ–Ω–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_character_info:"))
def cancel_character_info(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)

# –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith("finalize_choice:"))
def throw_dice(call):
    _, event_idx, user_id = call.data.split(':')
    event_idx = int(event_idx)
    user_id = int(user_id)
    markup = types.InlineKeyboardMarkup(row_width=2)
    dice = types.InlineKeyboardButton("–ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫–∏ üé≤", callback_data=f'dice:{event_idx}:{user_id}')
    markup.add(dice)
    bot.send_message(call.message.chat.id, '–£–∑–Ω–∞–π—Ç–µ –∏—Ç–æ–≥ —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É!', reply_markup=markup)
    bot.delete_message(call.message.chat.id, call.message.message_id)

# –∏—Ç–æ–≥–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("dice:"))
def throw_dice(call):
    _, event_idx, user_id = call.data.split(':')
    event_idx = int(event_idx) + 1
    user_id = int(user_id)
    character_info = characters[global_chat_id][user_id]
    character_name = character_info[0]
    skills = character_info[3]


    dice1, dice2, test_result = dice(skills, event_dict[event_idx][1], event_dict[event_idx][0])
    bot.send_message(call.message.chat.id, f'*üé≤ –ó–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∫—É–±–∏–∫–∞—Ö: {dice1}, {dice2}*\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–±—ã—Ç–∏—è: {test_result}')
    global formula_end_sum
    if test_result == '–Ω–µ—É–¥–∞—á–∞':
        formula_end_sum += event_dict[event_idx][0] * 0.2
    elif test_result == '—É—Å–ø–µ—Ö':
        formula_end_sum += event_dict[event_idx][0]
    else:
        formula_end_sum = -1
    bot.delete_message(call.message.chat.id, call.message.message_id)

    basic_generation(call.message.chat.id, game_context, event_idx, character_name, test_result, formula_end_sum, dead=False)

#     game_cycle(call.message.chat.id, game_context, event_idx, character_name, test_result)


# # def game_cycle(chat_id, initial_game_context, initial_event_idx, initial_character_name, initial_test_result):
# #     game_context = initial_game_context
# #     event_idx = initial_event_idx
# #     character_name = initial_character_name
# #     test_result = initial_test_result
# #     max_events = world_info[chat_id][-1]  
# #     global formula_end_sum
# #     formula_end_sum = 0  

# #     for i in range(2, max_events):
# #         dead = (formula_end_sum == -1)

# #         game_context, event_idx, character_name, test_result, formula_end_sum = basic_generation(
# #             chat_id, game_context, event_idx, character_name, test_result, formula_end_sum, dead
# #         )


    










def basic_generation(chat_id, game_context, event_idx, character_name, test_result, formula_end_sum, dead=False):
    if dead == False:
        create = bot.send_sticker(global_chat_id, STICKERS_API[4])
        gen_prompt = f'–í—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {event_idx}, –ø–µ—Ä—Å–æ–Ω–∞–∂: {character_name}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {test_result}'
        game_context[chat_id].append({"role": "user", "content": gen_prompt})
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=game_context[chat_id],
            max_tokens = 1000
        )
        action = response.choices[0].message.content
        game_context[global_chat_id].append({"role": "assistant", "content": action})
        bot.delete_message(global_chat_id, create.message_id)
        choises_dict = '–í–µ—Ä–Ω–∏ –∏–∑ —ç—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π. –ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –∫–æ–¥(–±–µ–∑ –º–∞—Ä–∫–¥–∞—É–Ω–∞(```py), —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞—Ä—å). –§–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞—Ä—è: –∫–ª—é—á - –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è(—Ü–∏—Ñ—Ä–æ–π), –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫, –≥–¥–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è, –∞ –≤—Ç–æ—Ä–æ–π - —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'

        game_context[global_chat_id].append({"role": "user", "content": choises_dict})

        response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=game_context[chat_id],
            )
        
        global event_dict

        event_dict = eval(response.choices[0].message.content)
        game_context[global_chat_id].append({"role": "assistant", "content": str(event_dict)})

        event_dict = {int(key): value for key, value in event_dict.items()}

        print(event_dict)

        markup = types.InlineKeyboardMarkup(row_width=2)
        for idx, (name, details) in enumerate(event_dict.items()):
            button = types.InlineKeyboardButton(name, callback_data=f"confirm_choice:{idx}")
            markup.add(button)

        bot.send_message(chat_id, action, parse_mode="Markdown", reply_markup=markup)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è
        @bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_choice:"))
        def confirm_choice(call):
            event_idx = int(call.data.split(':')[1])
            event_names = list(event_dict.keys())
            event_name = event_names[event_idx]
            difficulty, skill = event_dict[event_name]

            confirm_markup = types.InlineKeyboardMarkup()
            cancel_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="cancel_choice")
            select_button = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data=f"choice_selected:{event_idx}")
            confirm_markup.add(cancel_button, select_button, row_width=2)

            bot.send_message(call.message.chat.id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç '{event_name}'?\n\n*–°–ª–æ–∂–Ω–æ—Å—Ç—å:* {difficulty}\n*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞:* {skill}", reply_markup=confirm_markup, parse_mode="Markdown")

        # –û—Ç–º–µ–Ω–∞
        @bot.callback_query_handler(func=lambda call: call.data == "cancel_choice")
        def cancel_choice(call):
            bot.delete_message(call.message.chat.id, call.message.message_id)

        # –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        @bot.callback_query_handler(func=lambda call: call.data.startswith("choice_selected:"))
        def select_choice(call):
            event_idx = int(call.data.split(':')[1])
            
            
            characters_in_game = characters[global_chat_id]
            
            character_markup = types.InlineKeyboardMarkup(row_width=2)
            for user_id, character_info in characters_in_game.items():
                character_name = character_info[0]
                character_button = types.InlineKeyboardButton(character_name, callback_data=f"perform_action:{event_idx}:{user_id}")
                character_markup.add(character_button)

            bot.send_message(call.message.chat.id, "*–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:*", reply_markup=character_markup)
            bot.delete_message(call.message.chat.id, call.message.message_id)

        # –î–µ—Ç–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        @bot.callback_query_handler(func=lambda call: call.data.startswith("perform_action:"))
        def show_character_info(call):
            _, event_idx, user_id = call.data.split(':')
            event_idx = int(event_idx)
            user_id = int(user_id)

            character_info = characters[global_chat_id][user_id]
            character_name = character_info[0]
            race = character_info[1]
            skills = character_info[3]
            photo = character_info[-1]

            formatted_skills = "\n".join([f"*{key.capitalize()}*: {value}" for key, value in skills.items()])
            character_message = (
                f"*–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:* {character_name}\n\n"
                f"*–†–∞—Å–∞:* {race}\n\n"
                f"*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n\n{formatted_skills}"
            )

            character_markup = types.InlineKeyboardMarkup(row_width=2)
            back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"cancel_character_info:{event_idx}")
            select_button = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data=f"finalize_choice:{event_idx}:{user_id}")
            character_markup.add(back_button, select_button)

            with open(photo, 'rb') as image_file:
                    bot.send_photo(
                        call.message.chat.id, 
                        photo=image_file, 
                        caption=character_message, 
                        parse_mode='Markdown',
                        reply_markup=character_markup 
                    )

        # –æ—Ç–º–µ–Ω–∞
        @bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_character_info:"))
        def cancel_character_info(call):
            bot.delete_message(call.message.chat.id, call.message.message_id)

        # –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤
        @bot.callback_query_handler(func=lambda call: call.data.startswith("finalize_choice:"))
        def throw_dice(call):
            _, event_idx, user_id = call.data.split(':')
            event_idx = int(event_idx)
            user_id = int(user_id)
            markup = types.InlineKeyboardMarkup(row_width=2)
            dice = types.InlineKeyboardButton("–ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫–∏ üé≤", callback_data=f'dice:{event_idx}:{user_id}')
            markup.add(dice)
            bot.send_message(call.message.chat.id, '–£–∑–Ω–∞–π—Ç–µ –∏—Ç–æ–≥ —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É!', reply_markup=markup)
            bot.delete_message(call.message.chat.id, call.message.message_id)

        # –∏—Ç–æ–≥–∏ —Å–æ–±—ã—Ç–∏—è
        @bot.callback_query_handler(func=lambda call: call.data.startswith("dice:"))
        def throw_dice(call):
            _, event_idx, user_id = call.data.split(':')
            event_idx = int(event_idx) + 1
            user_id = int(user_id)
            character_info = characters[global_chat_id][user_id]
            character_name = character_info[0]
            skills = character_info[3]

            dice1, dice2, test_result = dice(skills, event_dict[event_idx][1], event_dict[event_idx][0])
            bot.send_message(call.message.chat.id, f'*üé≤ –ó–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∫—É–±–∏–∫–∞—Ö: {dice1}, {dice2}*\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–±—ã—Ç–∏—è: {test_result}')
            bot.delete_message(call.message.chat.id, call.message.message_id)

            if test_result == '–Ω–µ—É–¥–∞—á–∞':
                formula_end_sum += event_dict[event_idx][0] * 0.2
            elif test_result == '—É—Å–ø–µ—Ö':
                formula_end_sum += event_dict[event_idx][0]
            else:
                formula_end_sum = -1
                

            return game_context, event_idx, character_name, test_result, formula_end_sum
        
    else:
        ending = final_choise(formula_end_sum, world_info[chat_id][-1])
        prompt = f"–≠—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –ø–æ—Å–ª–µ –Ω–µ–≥–æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç. –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–±–æ—Ä—ã –ø—Ä–∏–≤–µ–ª–∏ –∫ {ending}"
        game_context[global_chat_id].append({"role": "user", "content": prompt})
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=game_context[global_chat_id],
            max_tokens=1000
        )
        finall = eval(response.choices[0].message.content)

        bot.send_message(global_chat_id, finall)



    

    





print('bot polling')
bot.polling()